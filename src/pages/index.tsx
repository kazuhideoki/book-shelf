import { Button, Grid } from "@material-ui/core";
import type { NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { useCallback, useEffect, useState } from "react";
import { Document, Page, pdfjs } from "react-pdf";
import { useRecoilValue, useSetRecoilState } from "recoil";
import { driveAuthState } from "../recoil/atom/drive-auth";
import styles from "../styles/Home.module.css";
import { DriveFiles } from "../type/google-drive-api.type";
import { axiosRequest } from "../utils/axios";
import { base64ToArrayBuffer } from "../utils/base64ToArrayBuffer";
import { FrontAuth } from "../utils/front-firebase";
pdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.js`;

interface P {
  code?: string;
  // authResponse?: AuthResponse;
}

const sampleIds = [
  "14y_If6OunynA-KMIYiTPGNldfZ3z8WEb",
  "1gURMeOUJ1rtQ8ZYteWu_UZcoYv_fbQJu",
  "1-xVrIdceiJWuBTkYmq6HWar86owU98St",
];

const Home: NextPage<P> = ({ code }) => {
  const [driveFiles, setDriveFiles] = useState<DriveFiles | null>(null);
  const [file, setFile] = useState<any>(null);
  const [multipleFiles, setMultipleFiles] = useState<any[]>([]);
  const [displayedFile, setDisplayedFile] = useState<any>(null);
  const authResponse = useRecoilValue(driveAuthState);
  const setDriveAuth = useSetRecoilState(driveAuthState);

  console.log({ displayedFile });

  useEffect(() => {
    let count = 1;
    const timer = setInterval(() => {
      console.log({
        count,
      });
      console.log({
        fileLength: multipleFiles?.length,
      });

      const fileNumber = count % (multipleFiles?.length || 3);
      // const fileNumber = count % 3;
      console.log({ fileNumber });
      console.log({ targetFile: multipleFiles[fileNumber] });
      setDisplayedFile(multipleFiles[fileNumber]);

      count++;
    }, 6000);

    return () => clearInterval(timer);
  }, [multipleFiles]);

  const handleFetchFileList = useCallback(async () => {
    console.log({ frontAccessToken: authResponse?.access_token });

    const res = await axiosRequest<DriveFiles>("GET", `api/drive/files`, {
      params: {
        ...authResponse,
      },
    });

    console.log({ res });

    setDriveFiles(res);
  }, [authResponse]);

  const handleFetchFile = useCallback(
    async (fileId: string) => {
      const res = await axiosRequest<string>(
        "GET",
        `api/drive/files/${fileId}/media`,
        {
          params: {
            ...authResponse,
            fileId,
          },
        }
      );

      setFile(base64ToArrayBuffer(res));
    },
    [authResponse]
  );

  const handleFetch3files = useCallback(async () => {
    console.log("handleFetch3files");

    const res = await Promise.all([
      ...sampleIds.map((fileId) =>
        axiosRequest<string>("GET", `api/drive/files/${fileId}/media`, {
          params: {
            ...authResponse,
            fileId,
            // mediaType: MediaType.IMAGE,
          },
        })
      ),
    ]);

    console.log({ handleFetch3filesRes: res });

    setMultipleFiles(res.map((e) => base64ToArrayBuffer(e)));
    // setMultipleFiles(res);
  }, [authResponse]);

  // useEffect(() => {
  //   if (code && !authResponse) {
  //     axiosRequest<DriveAuth>("GET", `api/drive/token`, {
  //       params: {
  //         code,
  //       },
  //     }).then((authResponse) => setDriveAuth(authResponse));
  //   }
  // }, [code]);

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          Welcome to{" "}
          <a href={process.env.NEXT_PUBLIC_WEB_SERVICE_URL}>E Book Shelf!</a>
        </h1>

        <Grid item>
          <div style={{ height: 400 }}>
            <Document file={displayedFile}>
              {<Page key={`page_${1}`} pageNumber={1} height={400} />}
            </Document>
          </div>
          {/* <img src={displayedFile} width={400} height={400} /> */}
        </Grid>

        <Grid container direction="column" spacing={1}>
          <Grid item>
            <Button variant="contained" onClick={handleFetchFileList}>
              ファイル一覧取得
            </Button>
            <Button variant="contained" onClick={handleFetch3files}>
              3ファイル取得
            </Button>
          </Grid>
          <Grid item container spacing={1}>
            {driveFiles?.files.map((file, i) => {
              return (
                <Grid item key={i}>
                  <Button
                    variant="outlined"
                    onClick={() => handleFetchFile(file.id)}
                  >
                    {file.name}
                  </Button>
                  【{file.id}】
                </Grid>
              );
            })}
            {driveFiles?.files.map((file, i) => {
              return (
                <Grid item key={i}>
                  <Button
                    variant="outlined"
                    onClick={() => handleFetchFile(file.id)}
                  >
                    {file.name}
                  </Button>
                </Grid>
              );
            })}
          </Grid>

          <Grid item>
            <Document file={file}>
              {<Page key={`page_${1}`} pageNumber={1} />}
            </Document>
          </Grid>

          <Grid item>
            <Button onClick={async () => FrontAuth.signOut()}>
              サインアウト
            </Button>
          </Grid>
        </Grid>
      </main>
      <Link href={`/settings`}>設定ページへ</Link>
    </div>
  );
};

// export const getServerSideProps: GetServerSideProps = async (context) => {
//   const code = context.query?.code as string;

//   if (!code) {
//     const url = getAuthUrl();
//     context.res.setHeader("location", url);
//     context.res.statusCode = 302;
//     context.res.end();
//     return { props: {} };
//   }

//   return { props: { code } };
// };

export default Home;

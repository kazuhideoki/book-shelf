import {
  Box,
  Button,
  Dialog,
  DialogActions,
  DialogContent,
  DialogTitle,
  Grid,
  Link,
  Typography,
} from "@mui/material";
import type { NextPage } from "next";
import Head from "next/head";
import { useRouter } from "next/router";
import { Suspense, useState } from "react";
import { useGoogleLogout } from "react-google-login";
import { pdfjs } from "react-pdf";
import { useRecoilState } from "recoil";
import { Display } from "../components/Display";
import { ErrorBoundary } from "../components/ErrorBoundary";
import { SelectDisplaySetsDialog } from "../components/SelectDisplaySetsDialog";
import { authState } from "../recoil/atom/auth";
import styles from "../styles/Home.module.css";
import { ImageSet } from "../type/model/firestore-image-set.type";
import { useRequest } from "../utils/axios";
import { useWithLoading } from "../utils/with-loading";
pdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.js`;

interface P {}

const Home: NextPage<P> = () => {
  const router = useRouter();
  const request = useRequest();
  const withLoading = useWithLoading();

  const { signOut } = useGoogleLogout({
    clientId: process.env.NEXT_PUBLIC_GOOGLE_DRIVE_API_CLIENT_ID!,
  });
  const [auth, setAuth] = useRecoilState(authState);

  const [showDialog, setShowDialog] = useState(false);

  const [targetImg, setTargetImg] = useState<ImageSet | null>(null);

  // useEffect(() => {
  //   if (auth.initialized) {
  //     request<DisplaySet[]>("GET", ServerPath.displaySets)
  //       .then((res) => {
  //         setDisplaySets(res);
  //         setShowDialog(true);
  //       })
  //       .catch((error) => {
  //         console.log({ error });
  //         console.log(`Error occurred: ${error}`);
  //       });
  //   }
  // }, []);

  // // 表示する画像を一定間隔で入れ替える
  // useEffect(() => {
  //   let count = 1;
  //   const timer = setInterval(() => {
  //     if (imgs.length) {
  //       const fileNumber = count % imgs.length;

  //       setTargetImg(imgs[fileNumber]);

  //       count++;
  //     }
  //   }, 6000);

  //   return () => clearInterval(timer);
  // }, [imgs]);

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <Typography variant="h6">
          <Link href={process.env.NEXT_PUBLIC_WEB_SERVICE_URL}>
            E Book Shelf
          </Link>
        </Typography>

        <ErrorBoundary errorComponent={<>エラーディスプレイだよ</>}>
          <Suspense fallback={<Box sx={{ height: 400, width: 400 }} />}>
            <Display />
          </Suspense>
        </ErrorBoundary>

        <Grid container spacing={1} justifyContent="end">
          <Grid item>
            <Button onClick={() => setShowDialog(true)}>
              ディスプレイセット選択
            </Button>
            <Button
              onClick={() => {
                signOut();
                setAuth({ auth: undefined, initialized: false });
              }}
            >
              サインアウト
            </Button>
          </Grid>
        </Grid>
      </main>
      <Dialog open={showDialog} onClose={() => setShowDialog(false)}>
        <DialogTitle>ディスプレイセットの選択</DialogTitle>
        <DialogContent>
          <ErrorBoundary errorComponent={<>エラーだよ</>}>
            <Suspense fallback={<>{"読み込みだよ〜"}</>}>
              <SelectDisplaySetsDialog />
            </Suspense>
          </ErrorBoundary>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setShowDialog(false)}>閉じる</Button>
        </DialogActions>
      </Dialog>
    </div>
  );
};

export default Home;
